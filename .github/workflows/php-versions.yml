name: Fetch PHP Versions

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  extract-php-versions:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.filter-versions.outputs.versions }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch and process PHP CLI tarballs
        run: |
          echo "Fetching tarball list from static-php.dev..."

          # Fetch the directory listing
          curl -s https://dl.static-php.dev/static-php-cli/bulk/ | \
          # Extract hrefs from anchor tags
          grep -oP "href='\K[^']*" | \
          # Filter for PHP CLI tarball pattern
          grep -E 'php-([0-9]+\.[0-9]+\.[0-9]+)-cli-(.+)\.tar\.gz' | \
          # Extract version numbers using sed
          sed -E 's/.+php-([0-9]+\.[0-9]+\.[0-9]+)-cli-.*\.tar\.gz/\1/' | \
          # Sort unique versions and remove duplicates
          sort -u | \
          # Sort in descending order using version sort
          sort -V -r > all_php_versions.txt

          echo "Found PHP versions:"
          cat all_php_versions.txt

      - name: Filter out versions with existing tags
        id: filter-versions
        run: |
          echo "Fetching existing tags..."
          git fetch --tags

          echo "Filtering out versions that already have tags..."
          > php_versions.txt

          while read -r version; do
          if ! git tag --list | grep -q "^v${version}$"; then
            echo "New version found: $version"
            echo "$version" >> php_versions.txt
            else
            echo "Version $version already has a tag, skipping"
          fi
          done < all_php_versions.txt

          echo "Filtered PHP versions (new only):"
          cat php_versions.txt

          # Skip if no new versions found
          if [ ! -s php_versions.txt ]; then
            echo "No new PHP versions found to release."
            echo "versions=[]" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Convert to JSON array for matrix strategy
          if [ -s php_versions.txt ]; then
            versions=$(jq -R -s -c 'split("\n") | map(select(length > 0))' php_versions.txt)
            echo "versions=$versions" >> $GITHUB_OUTPUT
          fi

  dispatch-releases:
    needs: extract-php-versions
    runs-on: ubuntu-latest
    if: needs.extract-php-versions.outputs.versions != '[]'
    strategy:
      matrix:
        version: ${{ fromJSON(needs.extract-php-versions.outputs.versions) }}
    permissions:
      contents: read
      actions: write
    steps:
      - name: Dispatch release workflow for PHP ${{ matrix.version }}
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: php-release.yml
          inputs: '{ "version": "${{ matrix.version }}" }'
