name: Fetch PHP Versions

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  extract-php-versions:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.filter-versions.outputs.versions }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch and process PHP CLI tarballs
        id: filter-versions
        run: |
          echo "Fetching tarball list from static-php.dev JSON API..."

          # Fetch the JSON data and filter for PHP CLI tarballs
          curl -sS "https://dl.static-php.dev/static-php-cli/bulk/?format=json" | \
          # Use jq to filter and process JSON data
          jq -r '
            .[] | 
            select(.is_dir == false and (.name | test("php-[0-9]+\\.[0-9]+\\.[0-9]+-cli-.+\\.tar\\.gz"))) |
            {
              name: .name,
              version: (.name | capture("php-(?<version>[0-9]+\\.[0-9]+\\.[0-9]+)-cli-") | .version),
              last_modified: .last_modified
            } |
            # Check if last modified date is within 2 days
            select(
              ((.last_modified | strptime("%Y-%m-%d %H:%M:%S") | mktime) > (now - (90 * 24 * 60 * 60)))
            ) |
            .version
          ' | \
          # Sort unique versions and remove duplicates
          sort -u > php_versions.txt

          if [ -s php_versions.txt ]; then
            echo "New PHP versions:"
            cat php_versions.txt

            # Convert to JSON array for matrix strategy
            versions=$(jq -R -s -c 'split("\n") | map(select(length > 0))' php_versions.txt)
            echo "versions=$versions" >> $GITHUB_OUTPUT
          else
            # Skip if no new versions found
            echo "No new PHP versions found to release."
            echo "versions=[]" >> $GITHUB_OUTPUT
          fi

  dispatch-releases:
    needs: extract-php-versions
    runs-on: ubuntu-latest
    if: needs.extract-php-versions.outputs.versions != '[]'
    strategy:
      matrix:
        version: ${{ fromJSON(needs.extract-php-versions.outputs.versions) }}
    permissions:
      contents: read
      actions: write
    steps:
      - name: Dispatch release workflow for PHP ${{ matrix.version }}
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: php-release.yml
          inputs: '{ "version": "${{ matrix.version }}" }'
