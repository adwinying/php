name: Fetch PHP Versions

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  extract-php-versions:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.filter-versions.outputs.versions }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch and process PHP CLI tarballs
        id: filter-versions
        run: |
          echo "Fetching tarball list from static-php.dev..."

          # Fetch the directory listing
          curl -sS https://dl.static-php.dev/static-php-cli/bulk/ | \
          # Filter for PHP CLI tarball pattern
          grep -E 'php-([0-9]+\.[0-9]+\.[0-9]+)-cli-(.+)\.tar\.gz' | \
          # Loop over each line
          while read -r line; do
            # Extract version number and date using sed
            version=$(echo "$line" | sed -E 's/.+php-([0-9]+\.[0-9]+\.[0-9]+)-cli-.*\.tar\.gz.+/\1/')
            date_str=$(echo "$line" | sed -E 's/.+([0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}).+/\1/')

            # Check if last modified date is within 2 days
            date_unix=$(date -d "$date_str" "+%s")
            two_days_ago=$(date -d "-2 days" "+%s")
            if [ $date_unix -gt $two_days_ago ]; then
              echo "$version"
            fi
          done | \
          # Sort unique versions and remove duplicates
          sort -u > php_versions.txt

          if [ -s php_versions.txt ]; then
            echo "New PHP versions:"
            cat php_versions.txt

            # Convert to JSON array for matrix strategy
            versions=$(jq -R -s -c 'split("\n") | map(select(length > 0))' php_versions.txt)
            echo "versions=$versions" >> $GITHUB_OUTPUT
          else
            # Skip if no new versions found
            echo "No new PHP versions found to release."
            echo "versions=[]" >> $GITHUB_OUTPUT
          fi

  dispatch-releases:
    needs: extract-php-versions
    runs-on: ubuntu-latest
    if: needs.extract-php-versions.outputs.versions != '[]'
    strategy:
      matrix:
        version: ${{ fromJSON(needs.extract-php-versions.outputs.versions) }}
    permissions:
      contents: read
      actions: write
    steps:
      - name: Dispatch release workflow for PHP ${{ matrix.version }}
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: php-release.yml
          inputs: '{ "version": "${{ matrix.version }}" }'
